React Context



//name
<Parent name={props.name} /> 
    |
<Child name={props.name}/>
    |
<Child name={props.name}/>
    |
<Child name={props.name}/>
    |
<Child name={props.name}/>

//prop drilling

React Context - it is used to help us share state and functionality between components that are not directly related. 
React Context can help us alleviate prop drilling.


Demo-
1. Show you how to set up React Context
    a. createContext
        -we need to create a new context object
        -create a context object file typeOfStateProvider.js
        -Import createContext from the react library
        -create a context object
    b. how to create a provider components


//before
<Parent name={props.name} /> 
    |
<Child name={props.name}/>
    |
<Child name={props.name}/>
    |
<Child name={props.name}/>
    |
<Child name={props.name}/>

//after with react context

<CountProvider>
<App /> 
    |
<Greeting /> 
    |
<ChildDecrement /> -> decrement
    |
<Child />
    |
<Child />
</CountProvider>
//count, increment, decrement


2. How to provide access to the context to your components.
1. define your context
2. identify where in your component tree to provide access to this new context -> top parent component
3. Wrap the Provider component to the starting component

4. Import the context into your context and the useContext function from react



//Context Notes

Here's a breakdown of what's happening in this code:
1. import React, { createContext, useContext, useState } from 'react' is importing the necessary modules from the react library.

2. const CountContext = createContext() is creating a new context object and assigning it to the variable CountContext. This context object is used to store and share state and functionality between components.

3. const CountProvider = ({children}) => {...} is creating a new component called CountProvider. This component is a provider component that wraps its child components and provides state and functionality to them through the CountContext.

4. const [count, setCount] = useState(0) is using the useState hook to create a new state variable called count and its setter function setCount, and initializing it to 0.

5. function increment() {...} and function decrement() {...} are two functions that are used to increment and decrement the value of the count state variable.

6. <CountContext.Provider value={{count, increment, decrement}}> is rendering a context provider element that uses the CountContext to provide the count, increment and decrement values to the context consumers.

7. {children} is being passed as a prop to the CountProvider component, and this line is rendering the child components that are nested within the CountProvider component.

8. export {CountProvider, CountContext} is exporting the CountProvider component and the CountContext so that it can be imported and used in other parts of the application.